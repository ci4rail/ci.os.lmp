# ===================================================
# mounts
# ===================================================

# Where the yocto-build happens
mount=build-dir:
  bind: mender-on-verdin
  path: /work

# The location of kasfile.yaml (kas expects it in /repo)
mount=repo-dir:
  bind: mender-on-verdin
  path: /repo
  read-only: true

# Yocto downloads DL_DIR
mount=download-dir:
  bind: "{env.YOCTO_DOWNLOAD_DIR:downloads}"
  path: /downloads

# Yocto shared state cache SSTATE_DIR
mount=sstate-dir:
  bind: "{env.YOCTO_SSTATE_CACHE_DIR:}mender-on-verdin/sstate-cache"
  path: /sstate-cache

# Yocto images (DEPLOY_DIR)
mount=install-dir:
  bind: mender-on-verdin/install
  path: /install

# Mender files (mender-binary-delta)
mount=mender-dir:
  bind: mender-on-verdin/mender
  path: /mender

# ===================================================
# envs
# ===================================================

env=mender-on-verdin-envs:
    files: [mender-on-verdin/config/mender.env]

# ===================================================
# images
# ===================================================
image=image-kas:
  image: ghcr.io/siemens/kas/kas
  tags: ['2.3.3']
  pull: once

# ===================================================
# jobs
# ===================================================

# Interactive yocto shell
job=mender-on-verdin-yocto-shell:
  use: image-kas
  depends:
    - mender-on-verdin-envs
  command: "shell /repo/kasfile.yaml"
  mounts:
    - build-dir
    - repo-dir
    - download-dir
    - sstate-dir
    - install-dir
    - mender-dir
  working-dir: /work
  interactive: true
  env:
    - USER_ID={user.uid}
    - GROUP_ID={user.gid}
    - TERM=xterm-256color
    - SHELL=/bin/bash
    - MENDER_SERVER_URL={env.MENDER_SERVER_URL}
    - MENDER_TENANT_TOKEN={env.MENDER_TENANT_TOKEN}
    - MENDER_ARTIFACT_NAME={env.GitVersion_BranchVersion}{env.MENDER_ARTIFACT_DEV_SUFFIX}
    - IMAGE_GIT_VERSION={env.GitVersion_BranchVersion}
    - IMAGE_NAME_SUFFIX={env.IMAGE_NAME_SUFFIX}
  annotations:
    description: "interactive yocto shell"
    tags:
      - verdin

# Build tdx-reference-minimal-image
job=mender-on-verdin-build-minimal-image:
  use: image-kas
  depends:
    - mender-on-verdin-envs
    - mender-on-verdin-download-mender-delta-update
  sources:
    - mender-on-verdin/kasfile.yaml
  artifact:
    - mender-on-verdin/install/images/
  command: "build /repo/kasfile.yaml"
  mounts:
    - build-dir
    - repo-dir
    - download-dir
    - sstate-dir
    - install-dir
    - mender-dir
  working-dir: /work
  interactive: true
  env:
    - USER_ID={user.uid}
    - GROUP_ID={user.gid}
    - TERM=xterm-256color
    - SHELL=/bin/bash
    - MENDER_SERVER_URL={env.MENDER_SERVER_URL}
    - MENDER_TENANT_TOKEN={env.MENDER_TENANT_TOKEN}
    - MENDER_ARTIFACT_NAME={env.GitVersion_BranchVersion}{env.MENDER_ARTIFACT_DEV_SUFFIX}
    - IMAGE_GIT_VERSION={env.GitVersion_BranchVersion}
    - IMAGE_NAME_SUFFIX={env.IMAGE_NAME_SUFFIX}
  annotations:
    description: "Build tdx-reference-minimal-image"
    tags:
      - verdin

job=mender-on-verdin-download-mender-delta-update:
  use: image-curl
  depends:
    - mender-on-verdin-envs
  command: sh -c "cd /mender &&
                  curl -u ${HOSTED_MENDER_USER_EMAIL}:${HOSTED_MENDER_PASSWORD} -O ${MENDER_BINARY_DELTA_URI} &&
                  rm -rf mender-binary-delta &&
                  tar xf *.tar.xz &&
                  rm *.tar.xz &&
                  mkdir mender-binary-delta &&
                  mv mender-binary-delta-*/* mender-binary-delta &&
                  rm -rf mender-binary-delta-*"
  mounts:
    - mender-dir
  interactive: true
  env:
    - USER_ID={user.uid}
    - GROUP_ID={user.gid}
    - HOSTED_MENDER_USER_EMAIL={env.HOSTED_MENDER_USER_EMAIL}
    - HOSTED_MENDER_PASSWORD={env.HOSTED_MENDER_PASSWORD}
    - MENDER_BINARY_DELTA_URI={env.MENDER_BINARY_DELTA_URI}
  annotations:
    description: "download mender-binary-delta"
    tags:
      - verdin

# Clean 
job=mender-on-verdin-clean:
  use: image-kas
  entrypoint: rm -rf /downloads/ /sstate-cache/ /install/ /build/ /mender
  mounts:
    - build-dir
    - repo-dir
    - download-dir
    - sstate-dir
    - install-dir
    - mender-dir
  working-dir: /work
  interactive: true
  env:
    - USER_ID={user.uid}
    - GROUP_ID={user.gid}
    - TERM=xterm-256color
    - SHELL=/bin/bash
  annotations:
    description: "Cleanup"
    tags:
      - verdin
